/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input [4:0] io_button,
    output reg adafruit
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_select_out;
  reg [1-1:0] M_select_in;
  button_conditioner_1 select (
    .clk(clk),
    .in(M_select_in),
    .out(M_select_out)
  );
  wire [1-1:0] M_select_edge_out;
  reg [1-1:0] M_select_edge_in;
  edge_detector_2 select_edge (
    .clk(clk),
    .in(M_select_edge_in),
    .out(M_select_edge_out)
  );
  wire [1-1:0] M_red_button_out;
  reg [1-1:0] M_red_button_in;
  button_conditioner_1 red_button (
    .clk(clk),
    .in(M_red_button_in),
    .out(M_red_button_out)
  );
  wire [1-1:0] M_red_edge_out;
  reg [1-1:0] M_red_edge_in;
  edge_detector_2 red_edge (
    .clk(clk),
    .in(M_red_edge_in),
    .out(M_red_edge_out)
  );
  wire [1-1:0] M_green_button_out;
  reg [1-1:0] M_green_button_in;
  button_conditioner_1 green_button (
    .clk(clk),
    .in(M_green_button_in),
    .out(M_green_button_out)
  );
  wire [1-1:0] M_green_edge_out;
  reg [1-1:0] M_green_edge_in;
  edge_detector_2 green_edge (
    .clk(clk),
    .in(M_green_edge_in),
    .out(M_green_edge_out)
  );
  wire [1-1:0] M_blue_button_out;
  reg [1-1:0] M_blue_button_in;
  button_conditioner_1 blue_button (
    .clk(clk),
    .in(M_blue_button_in),
    .out(M_blue_button_out)
  );
  wire [1-1:0] M_blue_edge_out;
  reg [1-1:0] M_blue_edge_in;
  edge_detector_2 blue_edge (
    .clk(clk),
    .in(M_blue_edge_in),
    .out(M_blue_edge_out)
  );
  wire [1-1:0] M_yellow_button_out;
  reg [1-1:0] M_yellow_button_in;
  button_conditioner_1 yellow_button (
    .clk(clk),
    .in(M_yellow_button_in),
    .out(M_yellow_button_out)
  );
  wire [1-1:0] M_yellow_edge_out;
  reg [1-1:0] M_yellow_edge_in;
  edge_detector_2 yellow_edge (
    .clk(clk),
    .in(M_yellow_edge_in),
    .out(M_yellow_edge_out)
  );
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_11 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam HOLD_state = 3'd0;
  localparam LEVEL_ONE_state = 3'd1;
  localparam CHECK_ONE_state = 3'd2;
  localparam WRONG_state = 3'd3;
  localparam CORRECT_state = 3'd4;
  
  reg [2:0] M_state_d, M_state_q = HOLD_state;
  wire [1-1:0] M_neoled_stream;
  reg [1536-1:0] M_neoled_data;
  led_matrix_12 neoled (
    .clk(clk),
    .rst(rst),
    .data(M_neoled_data),
    .stream(M_neoled_stream)
  );
  wire [1536-1:0] M_display_out;
  reg [1-1:0] M_display_wr;
  reg [1536-1:0] M_display_data;
  register_13 display (
    .clk(clk),
    .rst(rst),
    .wr(M_display_wr),
    .data(M_display_data),
    .out(M_display_out)
  );
  reg [26:0] M_counter_d, M_counter_q = 1'h0;
  reg [2:0] M_cycler_d, M_cycler_q = 1'h0;
  reg [2:0] M_loaded_d, M_loaded_q = 1'h0;
  wire [12-1:0] M_temp_out;
  reg [1-1:0] M_temp_wr;
  reg [12-1:0] M_temp_data;
  slider_14 temp (
    .clk(clk),
    .rst(rst),
    .wr(M_temp_wr),
    .data(M_temp_data),
    .out(M_temp_out)
  );
  
  wire [12-1:0] M_colour_out;
  reg [2-1:0] M_colour_button;
  colour_mux4_15 colour (
    .button(M_colour_button),
    .out(M_colour_out)
  );
  
  wire [1536-1:0] M_dsp_out;
  reg [3-1:0] M_dsp_sel;
  display_mux8_16 dsp (
    .sel(M_dsp_sel),
    .out(M_dsp_out)
  );
  
  wire [12-1:0] M_lvl_out;
  reg [2-1:0] M_lvl_sel;
  lvl_mux4_17 lvl (
    .sel(M_lvl_sel),
    .out(M_lvl_out)
  );
  
  wire [12-1:0] M_myAlu_out;
  wire [1-1:0] M_myAlu_z;
  wire [1-1:0] M_myAlu_v;
  wire [1-1:0] M_myAlu_n;
  reg [12-1:0] M_myAlu_a;
  reg [12-1:0] M_myAlu_b;
  reg [6-1:0] M_myAlu_alufn;
  alu_18 myAlu (
    .a(M_myAlu_a),
    .b(M_myAlu_b),
    .alufn(M_myAlu_alufn),
    .out(M_myAlu_out),
    .z(M_myAlu_z),
    .v(M_myAlu_v),
    .n(M_myAlu_n)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_cycler_d = M_cycler_q;
    M_loaded_d = M_loaded_q;
    M_counter_d = M_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_select_in = io_button[1+0-:1];
    M_select_edge_in = M_select_out;
    M_red_button_in = io_button[0+0-:1];
    M_red_edge_in = M_red_button_out;
    M_green_button_in = io_button[2+0-:1];
    M_green_edge_in = M_green_button_out;
    M_blue_button_in = io_button[3+0-:1];
    M_blue_edge_in = M_blue_button_out;
    M_yellow_button_in = io_button[4+0-:1];
    M_yellow_edge_in = M_yellow_button_out;
    adafruit = M_neoled_stream;
    M_neoled_data = {M_display_out[1344+191-:192], M_display_out[1152+191-:192], M_display_out[960+191-:192], M_display_out[768+191-:192], M_display_out[576+191-:192], M_display_out[384+191-:192], M_display_out[192+191-:192], M_display_out[0+191-:192]};
    M_display_data = 1536'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    M_display_wr = 1'h0;
    M_temp_data = 12'h000;
    M_temp_wr = 1'h0;
    M_counter_d = M_counter_q + 1'h1;
    M_state_d = M_state_q;
    M_myAlu_alufn = 6'h00;
    M_myAlu_a = 12'h000;
    M_myAlu_b = 12'h000;
    M_colour_button = 2'h1;
    M_dsp_sel = 3'h4;
    M_lvl_sel = 2'h0;
    
    case (M_state_q)
      HOLD_state: begin
        if (M_loaded_q == 1'h0) begin
          M_dsp_sel = 3'h4;
          M_display_data = M_dsp_out;
          M_display_wr = 1'h1;
          M_loaded_d = 1'h1;
        end else begin
          M_display_wr = 1'h0;
        end
        if (M_select_edge_out) begin
          M_state_d = LEVEL_ONE_state;
          M_counter_d = 1'h0;
          M_loaded_d = 1'h0;
        end
      end
      LEVEL_ONE_state: begin
        if (M_loaded_q == 1'h0) begin
          M_lvl_sel = 2'h0;
          M_temp_data = M_lvl_out;
          M_temp_wr = 1'h1;
          M_loaded_d = 1'h1;
        end else begin
          if (M_loaded_q == 1'h1) begin
            if (M_cycler_q < 3'h6) begin
              M_dsp_sel = {1'h0, M_temp_out[0+1-:2]};
              M_display_data = M_dsp_out;
              M_display_wr = 1'h1;
              M_temp_wr = 1'h0;
              M_loaded_d = 2'h2;
            end else begin
              M_state_d = CHECK_ONE_state;
              M_cycler_d = 1'h0;
              M_loaded_d = 1'h0;
            end
          end else begin
            if (M_loaded_q == 2'h2) begin
              if (M_counter_q[25+0-:1] == 1'h1) begin
                M_myAlu_alufn = 6'h21;
                M_myAlu_a = M_temp_out;
                M_myAlu_b = 12'h002;
                M_temp_data = M_myAlu_out;
                M_display_wr = 1'h0;
                M_temp_wr = 1'h1;
                M_counter_d = 1'h0;
                M_cycler_d = M_cycler_q + 1'h1;
                M_loaded_d = 1'h1;
              end
            end
          end
        end
      end
      CHECK_ONE_state: begin
        if (M_loaded_q == 1'h0) begin
          M_dsp_sel = 3'h7;
          M_display_data = M_dsp_out;
          M_display_wr = 1'h1;
          M_loaded_d = 1'h1;
        end else begin
          if (M_loaded_q == 1'h1) begin
            M_lvl_sel = 2'h0;
            M_temp_data = M_lvl_out;
            M_display_wr = 1'h0;
            M_temp_wr = 1'h1;
            M_loaded_d = 2'h2;
          end else begin
            if (M_loaded_q == 2'h2) begin
              M_temp_wr = 1'h0;
              if (M_blue_edge_out) begin
                M_colour_button = 2'h0;
                if (M_cycler_q < 3'h5) begin
                  M_myAlu_alufn = 6'h33;
                  M_myAlu_a = {10'h000, M_temp_out[0+1-:2]};
                  M_myAlu_b = M_colour_out;
                  if (M_myAlu_out[0+0-:1] == 1'h1) begin
                    M_dsp_sel = {1'h0, M_temp_out[0+1-:2]};
                    M_display_data = M_dsp_out;
                    M_display_wr = 1'h1;
                    M_loaded_d = 2'h3;
                  end else begin
                    M_state_d = WRONG_state;
                    M_cycler_d = 1'h0;
                    M_loaded_d = 1'h0;
                  end
                end else begin
                  M_state_d = CORRECT_state;
                  M_cycler_d = 1'h0;
                  M_loaded_d = 1'h0;
                end
              end else begin
                if (M_green_edge_out) begin
                  M_colour_button = 2'h1;
                  if (M_cycler_q < 3'h5) begin
                    M_myAlu_alufn = 6'h33;
                    M_myAlu_a = {10'h000, M_temp_out[0+1-:2]};
                    M_myAlu_b = M_colour_out;
                    if (M_myAlu_out[0+0-:1] == 1'h1) begin
                      M_dsp_sel = {1'h0, M_temp_out[0+1-:2]};
                      M_display_data = M_dsp_out;
                      M_display_wr = 1'h1;
                      M_loaded_d = 2'h3;
                    end else begin
                      M_state_d = WRONG_state;
                      M_cycler_d = 1'h0;
                      M_loaded_d = 1'h0;
                    end
                  end else begin
                    M_state_d = CORRECT_state;
                    M_cycler_d = 1'h0;
                    M_loaded_d = 1'h0;
                  end
                end else begin
                  if (M_yellow_edge_out) begin
                    M_colour_button = 2'h2;
                    if (M_cycler_q < 3'h5) begin
                      M_myAlu_alufn = 6'h33;
                      M_myAlu_a = {10'h000, M_temp_out[0+1-:2]};
                      M_myAlu_b = M_colour_out;
                      if (M_myAlu_out[0+0-:1] == 1'h1) begin
                        M_dsp_sel = {1'h0, M_temp_out[0+1-:2]};
                        M_display_data = M_dsp_out;
                        M_display_wr = 1'h1;
                        M_loaded_d = 2'h3;
                      end else begin
                        M_state_d = WRONG_state;
                        M_cycler_d = 1'h0;
                        M_loaded_d = 1'h0;
                      end
                    end else begin
                      M_state_d = CORRECT_state;
                      M_cycler_d = 1'h0;
                      M_loaded_d = 1'h0;
                    end
                  end else begin
                    if (M_red_edge_out) begin
                      M_colour_button = 2'h3;
                      if (M_cycler_q < 3'h5) begin
                        M_myAlu_alufn = 6'h33;
                        M_myAlu_a = {10'h000, M_temp_out[0+1-:2]};
                        M_myAlu_b = M_colour_out;
                        if (M_myAlu_out[0+0-:1] == 1'h1) begin
                          M_dsp_sel = {1'h0, M_temp_out[0+1-:2]};
                          M_display_data = M_dsp_out;
                          M_display_wr = 1'h1;
                          M_loaded_d = 2'h3;
                        end else begin
                          M_state_d = WRONG_state;
                          M_cycler_d = 1'h0;
                          M_loaded_d = 1'h0;
                        end
                      end else begin
                        M_state_d = CORRECT_state;
                        M_cycler_d = 1'h0;
                        M_loaded_d = 1'h0;
                      end
                    end
                  end
                end
              end
            end else begin
              M_myAlu_alufn = 6'h21;
              M_myAlu_a = M_temp_out;
              M_myAlu_b = 12'h002;
              M_temp_data = M_myAlu_out;
              M_display_wr = 1'h0;
              M_temp_wr = 1'h1;
              M_cycler_d = M_cycler_q + 1'h1;
              M_loaded_d = 2'h2;
            end
          end
        end
      end
      CORRECT_state: begin
        if (M_loaded_q == 1'h0) begin
          M_dsp_sel = 3'h5;
          M_display_data = M_dsp_out;
          M_display_wr = 1'h1;
          M_loaded_d = 1'h1;
        end else begin
          M_display_wr = 1'h0;
        end
        if (M_select_edge_out) begin
          M_state_d = HOLD_state;
          M_loaded_d = 1'h0;
        end
      end
      WRONG_state: begin
        if (M_loaded_q == 1'h0) begin
          M_dsp_sel = 3'h6;
          M_display_data = M_dsp_out;
          M_display_wr = 1'h1;
          M_loaded_d = 1'h1;
        end else begin
          M_display_wr = 1'h0;
        end
        if (M_select_edge_out) begin
          M_state_d = HOLD_state;
          M_loaded_d = 1'h0;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_cycler_q <= 1'h0;
      M_loaded_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_cycler_q <= M_cycler_d;
      M_loaded_q <= M_loaded_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
